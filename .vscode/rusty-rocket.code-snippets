{
	"010-rocket-dependency": {
		"prefix": "rust",
		"body": [
			"# Rocket create in v0.4 requires Rust nightly build.",
			"# Will change with 0.5 (see also https://github.com/SergioBenitez/Rocket/issues/19)",
			"rocket = \"^0.4.0\""
		],
		"description": "Add dependency to rocket (Git because compile with Rust stable)"
	},
	"015-rocket-git": {
		"prefix": "rust",
		"body": [
			"[dependencies]",
			"# Rocket 0.5 runs with stable, nightly is no longer necessary",
			"rocket = { version = \"0.5.0-rc.1\", features = [ \"json\" ] }",
			"base64 = \"0.13\"",
			"serde = { version = \"1.0\", features = [\"derive\"] }",
			"serde_json = \"1.0\"",
			"reqwest = { version = \"0.11\", features = [\"json\", \"rustls-tls\"] }",
			"chrono = { version = \"0.4\", features = [\"serde\"] }"
		],
	},
	"020-use": {
		"prefix": "rust",
		"body": [
			"// region use",
			"#![cfg_attr(debug_assertions, allow(dead_code, unused_imports))]",
			"use reqwest;",
			"use rocket::{Build, Data, Request, Rocket, State, catch, catchers, fairing::{self, Fairing, Info, Kind}, get, http::{Cookie, CookieJar, Method, Status}, launch, post, request::{self, FromRequest, Outcome}, response::{content::Html, status::Created}, routes, serde::json::Json, uri};",
			"use serde::{Deserialize, Serialize};",
			"use std::{collections::HashMap, sync::Arc};",
			"use std::str;",
			"use std::sync::atomic::{AtomicUsize, Ordering};",
			"use std::sync::RwLock;",
			"// endregion",
			""
		],
		"description": "Contains all use statements for entire demo. Warnings disabled for debug builds."
	},
	"025-basic-get": {
		"prefix": "rust",
		"body": [
			"// region Basic GET Request",
			"// We can return basic data types like numbers, strings, Option, Result",
			"// because Rocket contains ready-made implementation of the `Responder` trait",
			"// for them. For our own types, we could implement custom responders.",
			"//    (see https://rocket.rs/v0.4/guide/responses/#implementations)",
			"#[get(\"/\")]",
			"fn hello_world() -> &'static str {",
			"    \"Hello, world!\"",
			"}",
			"// endregion"
		]
	},
	"030-basic-launch": {
		"prefix": "rust",
		"body": [
			"// Will generate (async) main function for us",
			"#[launch]",
			"fn rocket() -> _ {",
			"    rocket::build().mount(\"/api\", routes![",
			"        hello_world,",
			"    ])",
			"}"
		]
	},
	"035-annotate-test-module": {
		"prefix": "rust",
		"body": [
			"#[cfg(test)] mod tests;"
		]
	},
	"040-basic-test": {
		"prefix": "rust",
		"body": [
			"// region Use statements",
			"#![cfg_attr(debug_assertions, allow(dead_code, unused_imports))]",
			"use rocket::{local::blocking::Client, http::{Status, Header,},};",
			"use base64;",
			"//endregion",
			"",
			"// region Basic GET",
			"#[test]",
			"fn test_hello_world() {",
			"    let client = Client::tracked(super::rocket()).unwrap();",
			"    let response = client.get(\"/api\").dispatch();",
			"    assert_eq!(response.into_string(), Some(\"Hello, world!\".into()));",
			"}",
			"// endregion"
		]
	},
	"045-dynamic-path": {
		"prefix": "rust",
		"body": [
			"// region Dynamic paths",
			"// You can use any type that implements the `FromParam` trait",
			"//    (see also https://api.rocket.rs/v0.4/rocket/request/trait.FromParam.html)",
			"// Use `RawStr` to get unsanitized, unvalidated, and undecoded raw string from HTTP message",
			"//    (see also https://api.rocket.rs/v0.4/rocket/http/struct.RawStr.html)",
			"// Rust considers parameter types during routing",
			"//    (see also https://rocket.rs/v0.4/guide/requests/#dynamic-paths)",
			"#[get(\"/<name>\")]",
			"fn greeting(name: String) -> String {",
			"    format!(\"Hello {}\", name)",
			"}",
			"// endregion"
		]
	},
	"050-dynamic-path-test": {
		"prefix": "rust",
		"body": [
			"// region Test for dynamic paths",
			"#[test]",
			"fn test_greeting() {",
			"    let client = Client::tracked(super::rocket()).unwrap();",
			"    let response = client.get(\"/api/rainer\").dispatch();",
			"    assert_eq!(response.into_string(), Some(\"Hello rainer\".into()));",
			"}",
			"// endregion"
		]
	},
	"055-query-string-params": {
		"prefix": "rust",
		"body": [
			"// region Query string params",
			"// You can use any type that implements the `FromParam` trait",
			"//    (see also https://api.rocket.rs/v0.4/rocket/request/trait.FromFormValue.html)",
			"// Note optional parameters",
			"// For more details see https://rocket.rs/v0.4/guide/requests/#query-strings",
			"#[get(\"/hello?<name>&<salutation>\")]",
			"fn query_greeting(name: String, salutation: Option<String>) -> String {",
			"    match salutation {",
			"        Some(s) => format!(\"{} {}\", s, name),",
			"        None => format!(\"Hello {}\", name)",
			"    }",
			"}",
			"// endregion"
		]
	},
	"060-query-string-tests": {
		"prefix": "rust",
		"body": [
			"// region Test for query string params",
			"#[test]",
			"fn test_querystring_without_salutation() {",
			"    let client = Client::tracked(super::rocket()).unwrap();",
			"    let response = client.get(\"/api/hello?name=rainer\").dispatch();",
			"    assert_eq!(response.into_string(), Some(\"Hello rainer\".into()));",
			"}",
			"",
			"#[test]",
			"fn test_querystring_with_salutation() {",
			"    let client = Client::tracked(super::rocket()).unwrap();",
			"    let response = client.get(\"/api/hello?name=rainer&salutation=Hi\").dispatch();",
			"    assert_eq!(response.into_string(), Some(\"Hi rainer\".into()));",
			"}",
			"// endregion"
		]
	},
	"065-custom-request-guard": {
		"prefix": "rust",
		"body": [
			"// Implement a custom request guard checking for the existance of an API key in request header",
			"// More about request guards at https://rocket.rs/v0.4/guide/requests/#request-guards",
			"",
			"#[derive(Debug)]",
			"pub struct ApiKey(pub String);",
			"",
			"#[derive(Debug)]",
			"pub enum ApiKeyError {",
			"    MissingKey,",
			"    InvalidKey,",
			"}",
			"",
			"// We have to implement `FromRequest` trait for `ApiKey`",
			"//    (see also https://api.rocket.rs/v0.4/rocket/request/trait.FromRequest.html)",
			"#[rocket::async_trait]",
			"impl<'r> FromRequest<'r> for ApiKey {",
			"    type Error = ApiKeyError;",
			"",
			"    async fn from_request(request: &'r Request<'_>) -> request::Outcome<Self, Self::Error> {",
			"        // Check if API key is present in header",
			"        match request.headers().get_one(\"x-api-key\") {",
			"            // Try to decode base64 API key",
			"            Some(s) => match base64::decode(s) {",
			"                    // We do not really check key here. If it is valid base64, we are ok with it.",
			"                    Ok(decoded_key) => Outcome::Success(ApiKey(str::from_utf8(&decoded_key).unwrap().to_owned())),",
			"                    Err(_) => Outcome::Failure((Status::Unauthorized, ApiKeyError::InvalidKey)),",
			"            },",
			"            None => Outcome::Failure((Status::Unauthorized, ApiKeyError::MissingKey)),",
			"        }",
			"    }",
			"}"
		]
	},
	"070-route-with-guard": {
		"prefix": "rust",
		"body": [
			"// region Request guard",
			"mod api_key;",
			"",
			"// Request guard",
			"#[get(\"/protected\")]",
			"fn protected(key: api_key::ApiKey) -> String {",
			"    format!(\"You are allowed to access this API because you presented key '{}'\", key.0)",
			"}",
			"// endregion"
		]
	},
	"075-tests-guarded-route": {
		"prefix": "rust",
		"body": [
			"// region Tests for request guard",
			"#[test]",
			"fn test_protected_without_key() {",
			"    let client = Client::tracked(super::rocket()).unwrap();",
			"    let response = client.get(\"/api/protected\").dispatch();",
			"    assert_eq!(response.status(), Status::Unauthorized);",
			"}",
			"",
			"#[test]",
			"fn test_protected_with_invalid_key() {",
			"    let client = Client::tracked(super::rocket()).unwrap();",
			"    let response = client.get(\"/api/protected\")",
			"        .header(Header::new(\"x-api-key\", \"c2VjcmV\"))",
			"        .dispatch();",
			"    assert_eq!(response.status(), Status::Unauthorized);",
			"}",
			"",
			"#[test]",
			"fn test_protected_with_key() {",
			"    let client = Client::tracked(super::rocket()).unwrap();",
			"    let response = client.get(\"/api/protected\")",
			"        .header(Header::new(\"x-api-key\", base64::encode(\"secret\")))",
			"        .dispatch();",
			"    assert_eq!(response.status(), Status::Ok);",
			"}",
			"// endregion"
		]
	},
	"080-cookie-guard": {
		"prefix": "rust",
		"body": [
			"// region Cookie guard",
			"// use rocket::{get, launch, routes, http::{Cookie,CookieJar,}};",
			"// Cookie request guard. There are also private (=encrypted) cookies.",
			"//    (see https://rocket.rs/v0.4/guide/requests/#cookies)",
			"#[get(\"/login\")]",
			"fn login(cookies: &CookieJar) {",
			"    cookies.add(Cookie::new(\"Session\", base64::encode(\"this_is_a_session_key\")));",
			"}",
			"",
			"#[get(\"/session\")]",
			"fn session(cookies: &CookieJar) -> &'static str {",
			"    match cookies.get(\"Session\") {",
			"        Some(_) => \"You got the cookie!\",",
			"        None => \"Sorry, no cookie!\",",
			"    }",
			"}",
			"// endregion"
		]
	},
	"085-cookie-test": {
		"prefix": "rust",
		"body": [
			"// region Test for cookie guard",
			"#[test]",
			"fn test_set_cookie() {",
			"    let client = Client::tracked(super::rocket()).unwrap();",
			"    let response = client.get(\"/api/login\").dispatch();",
			"    assert!(response.cookies().get(\"Session\").is_some())",
			"}",
			"// endregion"
		]
	},
	"090-hero-api-region": {
		"prefix": "rust",
		"body": [
			"// region Simple REST API",
			"// endregion"
		]
	},
	"100-hero-api-structs-types": {
		"prefix": "rust",
		"body": [
			"type ID = usize;",
			"",
			"// Rocket uses Serde for serializing/deserializing data.",
			"#[derive(Serialize, Debug, Clone)]",
			"struct Hero {",
			"    id: ID,",
			"    name: String,",
			"    #[serde(rename(serialize = \"canFly\"))]",
			"    can_fly: bool,",
			"}",
			"",
			"#[derive(Deserialize, Debug)]",
			"struct NewHero {",
			"    name: String,",
			"    #[serde(rename(deserialize = \"canFly\"))]",
			"    can_fly: bool,",
			"}"
		]
	},
	"105-in-memory-repository": {
		"prefix": "rust",
		"body": [
			"// We use a `RwLock`-protected `HashMap` instead of a DB. Note that Rocket has",
			"// built-in support for databases, but this is out-of-scope of this demo.",
			"//    (see https://rocket.rs/v0.4/guide/state/#databases for DB support)",
			"struct HeroCount(AtomicUsize);",
			"type HeroesMap = RwLock<HashMap<ID, Hero>>;"
		]
	},
	"110-add-hero-with-post": {
		"prefix": "rust",
		"body": [
			"// Rocket processes body data based on argument types. Here we deserialize",
			"// (`Deserialize` trait from Serde) a `NewHero` into the `hero` argument.",
			"//    (see https://rocket.rs/v0.4/guide/requests/#json)",
			"// Note that we return `Created`. It is a wrapping responder that changes the",
			"// HTTP status code to 201 (created) and responds with the inner responder",
			"// (in this case JSON).",
			"//    (see https://rocket.rs/v0.4/guide/responses/#wrapping)",
			"#[post(\"/heroes\", format = \"json\", data = \"<hero>\")]",
			"fn add_hero(",
			"    hero: Json<NewHero>,",
			"    heroes_state: &State<HeroesMap>,",
			"    hero_count: &State<HeroCount>,",
			") -> Created<Json<Hero>> {",
			"    // Generate unique hero ID",
			"    let hid = hero_count.0.fetch_add(1, Ordering::Relaxed);",
			"",
			"    // Build new hero",
			"    let new_hero = Hero {",
			"        id: hid,",
			"        name: hero.0.name,",
			"        can_fly: hero.0.can_fly,",
			"    };",
			"",
			"    // Insert new hero in hashmap",
			"    let mut heroes = heroes_state.write().unwrap();",
			"    heroes.insert(hid, new_hero.clone());",
			"",
			"    // Use uri macro to generate location header",
			"    //    (see https://rocket.rs/v0.4/guide/responses/#typed-uris)",
			"    let location = uri!(\"/api\", get_hero(hid));",
			"    Created::new(location.to_string()).body(Json(new_hero))",
			"}"
		]
	},
	"111-add-managed-hashmap": {
		"prefix": "rust",
		"body": [
			"        // Add managed state. Here we use global state. Request-local state",
			"        // would also be possible.",
			"        //    (see https://rocket.rs/v0.4/guide/state/)",
			"        .manage(RwLock::new(HashMap::<ID, Hero>::new()))",
			"        .manage(HeroCount(AtomicUsize::new(1)))"
		]
	},
	"115-get-single-hero": {
		"prefix": "rust",
		"body": [
			"// Note that we return `Option`. `None` would result in 404 (not found).",
			"#[get(\"/heroes/<id>\")]",
			"fn get_hero(id: ID, heroes_state: &State<HeroesMap>) -> Option<Json<Hero>> {",
			"    let heroes = heroes_state.read().unwrap();",
			"    heroes.get(&id).map(|h| Json(h.clone()))",
			"}"
		]
	},
	"120-get-all-heroes": {
		"prefix": "rust",
		"body": [
			"#[get(\"/heroes\")]",
			"fn get_all(heroes_state: &State<HeroesMap>) -> Json<Vec<Hero>> {",
			"    let heroes = heroes_state.read().unwrap();",
			"    Json(heroes.values().map(|v| v.clone()).collect())",
			"}"
		]
	},
	"125-404-catcher": {
		"prefix": "rust",
		"body": [
			"// region Catcher for 404",
			"// Catcher for 404 errors",
			"//    (see https://rocket.rs/v0.4/guide/requests/#error-catchers)",
			"#[catch(404)]",
			"fn not_found() -> Html<&'static str> {",
			"    Html(r#\"",
			"        <h1>Not found</h1>",
			"        <p>What are you looking for?</p>",
			"    \"#)",
			"}",
			"// endregion"
		]
	},
	"126-register-catcher": {
		"prefix": "rust",
		"body": [
			"        // Register catchers for errors.",
			"        //    (see https://rocket.rs/v0.4/guide/requests/#error-catchers)",
			"        .register(\"/\", catchers![not_found])"
		],
		"description": ""
	},
	"130-count-fairing": {
		"prefix": "rust",
		"body": [
			"// region Log Fairing",
			"// Implement a fairing that counts all requests",
			"//    (more about fairings at https://rocket.rs/v0.4/guide/fairings/#fairings)",
			"#[derive(Default, Clone)]",
			"struct Counter {",
			"    get: Arc<AtomicUsize>,",
			"    post: Arc<AtomicUsize>,",
			"}",
			"",
			"#[rocket::async_trait]",
			"impl Fairing for Counter {",
			"    fn info(&self) -> Info {",
			"        Info {",
			"            name: \"GET/POST Counter\",",
			"            kind: Kind::Ignite | Kind::Request",
			"        }",
			"    }",
			"",
			"    async fn on_ignite(&self, rocket: Rocket<Build>) -> fairing::Result {",
			"        #[get(\"/api/counts\")]",
			"        fn counts(counts: &State<Counter>) -> String {",
			"            let get_count = counts.get.load(Ordering::Relaxed);",
			"            let post_count = counts.post.load(Ordering::Relaxed);",
			"            format!(\"Get: {}\\nPost: {}\", get_count, post_count)",
			"        }",
			"",
			"        Ok(rocket.manage(self.clone()).mount(\"/\", routes![counts]))",
			"    }",
			"",
			"    async fn on_request(&self, request: &mut Request<'_>, _: &mut Data<'_>) {",
			"        if request.method() == Method::Get {",
			"            self.get.fetch_add(1, Ordering::Relaxed);",
			"        } else if request.method() == Method::Post {",
			"            self.post.fetch_add(1, Ordering::Relaxed);",
			"        }",
			"    }",
			"}",
			"// endregion"
		]
	},
	"135-attach-fairing": {
		"prefix": "rust",
		"body": [
			".attach(Counter::default())"
		]
	}
}